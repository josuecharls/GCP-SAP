using gcp_subsidios.Models;
using gcp_subsidios.Services;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.Options;

public class Program
{
    public static async Task Main(string[] args)
    {
        // Configurar el host con DI y configuración
        var host = Host.CreateDefaultBuilder(args)
            .ConfigureServices((context, services) =>
            {
                // Registrar configuración
                services.Configure<GcsDownloadConfig>(
                    context.Configuration.GetSection("GcsDownload"));

                // Registrar servicios
                services.AddTransient<GcsFileDownloader>();
            })
            .Build();

        try
        {
            // Resolver servicios desde DI
            var downloader = host.Services.GetRequiredService<GcsFileDownloader>();
            var config = host.Services.GetRequiredService<IOptions<GcsDownloadConfig>>().Value;

            // Validar configuración
            var validationResult = ValidateConfiguration(config);
            if (!validationResult.IsValid)
            {
                Console.WriteLine($"✗ Error de configuración: {validationResult.ErrorMessage}");
                return;
            }

            // Ejecutar la descarga
            var result = await downloader.DownloadFileAsync(config);

            if (result.Success)
            {
                Console.WriteLine($"✓ Archivo descargado exitosamente: {result.LocalFilePath}");
                Console.WriteLine($"  Tamaño: {result.FileSizeBytes} bytes");
            }
            else
            {
                Console.WriteLine($"✗ Error al descargar el archivo: {result.ErrorMessage}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"✗ Error inesperado: {ex.Message}");
        }
    }

    private static ValidationResult ValidateConfiguration(GcsDownloadConfig config)
    {
        if (string.IsNullOrWhiteSpace(config.ServiceAccountKeyPath))
            return ValidationResult.Invalid("ServiceAccountKeyPath es requerido");

        if (string.IsNullOrWhiteSpace(config.BucketName))
            return ValidationResult.Invalid("BucketName es requerido");

        if (string.IsNullOrWhiteSpace(config.FileName))
            return ValidationResult.Invalid("FileName es requerido");

        if (string.IsNullOrWhiteSpace(config.LocalDownloadPath))
            return ValidationResult.Invalid("LocalDownloadPath es requerido");

        if (!File.Exists(config.ServiceAccountKeyPath))
            return ValidationResult.Invalid($"El archivo de credenciales no existe: {config.ServiceAccountKeyPath}");

        return ValidationResult.Valid();
    }
}