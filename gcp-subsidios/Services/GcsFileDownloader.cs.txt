using gcp_subsidios.Models;
using Google;
using Google.Apis.Auth.OAuth2;
using Google.Cloud.Storage.V1;

namespace gcp_subsidios.Services
{
    internal class GcsFileDownloader
    {
        public async Task<DownloadResult> DownloadFileAsync(GcsDownloadConfig config)
        {
            try
            {
                // Crear cliente de Storage
                var credential = GoogleCredential.FromFile(config.ServiceAccountKeyPath);
                var storage = StorageClient.Create(credential);

                // Construir el path completo del archivo en GCS
                var objectName = BuildObjectName(config.FolderPath, config.FileName);

                // Verificar si el archivo existe
                var gcsObject = await GetObjectAsync(storage, config.BucketName, objectName);
                if (gcsObject == null)
                {
                    return DownloadResult.CreateFailure($"El archivo '{objectName}' no existe en el bucket '{config.BucketName}'");
                }

                // Preparar directorio local
                Directory.CreateDirectory(config.LocalDownloadPath);
                var localFilePath = Path.Combine(config.LocalDownloadPath, config.FileName);

                // Descargar el archivo
                await using var fileStream = File.Create(localFilePath);
                await storage.DownloadObjectAsync(config.BucketName, objectName, fileStream);

                return DownloadResult.CreateSuccess(localFilePath, gcsObject?.Size ?? 0);
            }
            catch (Exception ex)
            {
                return DownloadResult.CreateFailure($"Error durante la descarga: {ex.Message}");
            }
        }

        private static string BuildObjectName(string? folderPath, string fileName)
        {
            if (string.IsNullOrWhiteSpace(folderPath))
                return fileName;

            // Normalizar el path (remover barras al inicio/final y usar barras normales)
            var normalizedPath = folderPath.Trim('/').Replace('\\', '/');
            return $"{normalizedPath}/{fileName}";
        }

        private static async Task<Google.Apis.Storage.v1.Data.Object?> GetObjectAsync(
            StorageClient storage,
            string bucketName,
            string objectName)
        {
            try
            {
                return await storage.GetObjectAsync(bucketName, objectName);
            }
            catch (GoogleApiException ex) when (ex.HttpStatusCode == System.Net.HttpStatusCode.NotFound)
            {
                return null;
            }
        }
    }
}